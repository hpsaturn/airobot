// A very simple protocol definition, consisting of only
// one message for handling the joystick data

syntax = "proto2";

message JoystickMessage {
    required uint32 en = 1;   // enable/disable
    required uint32 ax = 2;   // left stick x position
    required uint32 ay = 3;   // left stick y position
    required uint32 az = 4;   // right stick x position
    required uint32 bA = 5;   // buttonA data
    required uint32 bB = 6;   // buttonB data
    required uint32 bX = 7;   // buttonX data
    required uint32 bY = 8;   // buttonY data
    required uint32 bL = 9;   // buttonL data
    required uint32 bR = 10;  // buttonR data
    required uint32 bU = 11;  // buttonUp data
    required uint32 bD = 12;  // buttonDown data
    required uint32 bS = 13;  // buttonStart data
    required uint32 bT = 14;  // buttonSelect data
    required uint32 ck = 15;  // check data
}

message TelemetryMessage {
    required uint32 btl = 1;  // battery level
    required float  btv = 2;  // battery voltage
    required uint32 x = 3;    // x position
    required uint32 y = 4;    // y position
    required uint32 z = 5;    // z position
    required uint32 e1 = 6;   // event1 data
    required uint32 e2 = 7;   // event2 data
    required uint32 e3 = 8;   // event3 data
    required uint32 e4 = 9;   // event4 data
    required float t1 = 10;   // variable1 data
    required float t2 = 11;   // variable2 data
    required uint32 ck = 12;  // check data
}

